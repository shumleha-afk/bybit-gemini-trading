import streamlit as st
import requests
import google.generativeai as genai
import os
if st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini"):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ symbol —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if not symbol or not isinstance(symbol, str):
        st.error("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –∑–∞–¥–∞–Ω. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT.")
        st.stop()
    
    with st.spinner("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Bybit –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini..."):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ —Å Bybit
            url = "https://api.bybit.com/v5/market/kline"
            params = {
                "category": "linear",
                "symbol": symbol,
                "interval": "60",
                "limit": 20
            }
            
            # üîß –î–æ–±–∞–≤–ª—è–µ–º User-Agent ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
            
            # üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∂–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
            st.write("üîç –ó–∞–ø—Ä–æ—Å –∫ Bybit API:")
            st.code(f"{url}?{requests.Request('GET', url, params=params, headers=headers).prepare().url}")
            
            resp = requests.get(url, params=params, headers=headers, timeout=10)
            resp.raise_for_status()  # –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ 4xx/5xx
            
            # üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∂–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
            st.write("üì¶ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit:")
            st.code(resp.text[:500])  # –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            data = resp.json()
            
            if data.get("retCode") != 0:
                st.error(f"‚ùå Bybit API –æ—à–∏–±–∫–∞: {data.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.stop()
            
            candles = data["result"]["list"]
            prices = [float(c[4]) for c in candles]  # –∑–∞–∫—Ä—ã—Ç–∏–µ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini
            data_str = "\n".join([
                f"–í—Ä–µ–º—è: {c[0]}, O: {c[1]}, H: {c[2]}, L: {c[3]}, C: {c[4]}"
                for c in candles[-10:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            ])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
            api_key = os.getenv("GEMINI_API_KEY")
            if not api_key:
                st.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY –≤ Secrets. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Settings ‚Üí Secrets –Ω–∞ Streamlit Cloud.")
                st.stop()
                
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-1.5-pro")
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π {symbol} –Ω–∞ Bybit.
            –î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Ç—Ä–µ–Ω–¥, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.
            –î–∞–Ω–Ω—ã–µ (–≤—Ä–µ–º—è –≤ Unix ms, O, H, L, C):
            {data_str}
            """
            
            response = model.generate_content(prompt)
            analysis = response.text
            
            st.success("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini:")
            st.markdown(analysis)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            st.markdown(analysis)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
