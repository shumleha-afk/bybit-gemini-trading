import streamlit as st
import requests
import google.generativeai as genai
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(
    page_title="Bybit TradingView + Gemini AI",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
st.title("üìà Bybit TradingView + ü§ñ Gemini AI –ê–Ω–∞–ª–∏–∑")
st.markdown("---")

# === –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ ===
symbol = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT)", value="BTCUSDT").strip().upper()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞
if not symbol or not symbol.replace("USDT", "").replace("USD", "").replace("PERP", "").isalpha():
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)")
    st.stop()

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ TradingView-–≤–∏–¥–∂–µ—Ç–∞ —á–µ—Ä–µ–∑ iframe ===
tradingview_url = f"https://s.tradingview.com/widgetembed/?frameElementId=tradingview_123&symbol=BYBIT:{symbol}.P&interval=60&theme=dark&style=1&locale=ru&toolbar_bg=%23f1f3f6&enable_publishing=false&hide_top_toolbar=false&hide_side_toolbar=true&save_image=true&studies=%5B%22STD%3BCumulative%251Volume%251Delta%22%2C%22STD%3BDEMA%22%2C%22STD%3BOpen%251Interest%22%2C%22STD%3BPivot%251Points%251Standard%22%2C%22STD%3BDivergence%251Indicator%22%5D&hide_volume=false&hide_legend=false&withdateranges=false&hotlist=false&calendar=false&details=false&watchlist=%5B%5D&compareSymbols=%5B%5D&studies_overrides=%7B%7D&overrides=%7B%22paneProperties.backgroundColor%22%3A%22%230F0F0F%22%2C%22paneProperties.gridColor%22%3A%22rgba(242%2C%20242%2C%20242%2C%200.06)%22%7D&timezone=Europe%2FMoscow"

st.components.v1.iframe(
    src=tradingview_url,
    width=1200,
    height=700,
    scrolling=False
)

# === –ö–Ω–æ–ø–∫–∞ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ ===
if st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini"):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ symbol —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if not symbol or not isinstance(symbol, str):
        st.error("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –∑–∞–¥–∞–Ω. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT.")
        st.stop()
    
    with st.spinner("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Bybit –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini..."):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ —Å Bybit
            url = "https://api.bybit.com/v5/market/kline"
            params = {
                "category": "linear",
                "symbol": symbol,
                "interval": "60",
                "limit": 20
            }
            
            # üîß –î–æ–±–∞–≤–ª—è–µ–º User-Agent ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
            
            # üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∂–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
            st.write("üîç –ó–∞–ø—Ä–æ—Å –∫ Bybit API:")
            st.code(f"{url}?{requests.Request('GET', url, params=params, headers=headers).prepare().url}")
            
        resp = requests.get(url, params=params, headers=headers, timeout=10)
url = "https://api.bybit.com/v5/market/kline"
params = {
    "category": "linear",
    "symbol": symbol,
    "interval": "60",
    "limit": 20
}

# üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "en-US,en;q=0.9",
    "Accept-Encoding": "gzip, deflate, br",
    "Referer": "https://www.bybit.com/",
    "Origin": "https://www.bybit.com",
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-site",
    "Connection": "keep-alive"
}

try:
    resp = requests.get(url, params=params, headers=headers, timeout=10)
    resp.raise_for_status()  # –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ 4xx/5xx)
            resp.raise_for_status()  # –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ 4xx/5xx
            
            # üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∂–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
            st.write("üì¶ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit:")
            st.code(resp.text[:500])  # –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            data = resp.json()
            
            if data.get("retCode") != 0:
                st.error(f"‚ùå Bybit API –æ—à–∏–±–∫–∞: {data.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                st.stop()
            
            candles = data["result"]["list"]
            prices = [float(c[4]) for c in candles]  # –∑–∞–∫—Ä—ã—Ç–∏–µ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Gemini
            data_str = "\n".join([
                f"–í—Ä–µ–º—è: {c[0]}, O: {c[1]}, H: {c[2]}, L: {c[3]}, C: {c[4]}"
                for c in candles[-10:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            ])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
            api_key = os.getenv("GEMINI_API_KEY")
            if not api_key:
                st.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY –≤ Secrets. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Settings ‚Üí Secrets –Ω–∞ Streamlit Cloud.")
                st.stop()
                
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-1.5-pro")
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π {symbol} –Ω–∞ Bybit.
            –î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Ç—Ä–µ–Ω–¥, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.
            –î–∞–Ω–Ω—ã–µ (–≤—Ä–µ–º—è –≤ Unix ms, O, H, L, C):
            {data_str}
            """
            
            response = model.generate_content(prompt)
            analysis = response.text
            
            st.success("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini:")
            st.markdown(analysis)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
