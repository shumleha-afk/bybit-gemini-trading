import streamlit as st
import websocket
import json
import threading
import time
import google.generativeai as genai
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(
    page_title="Bybit TradingView + Gemini AI",
    layout="wide",
    initial_sidebar_state="collapsed"
)

st.title("üìà Bybit TradingView + ü§ñ Gemini AI –ê–Ω–∞–ª–∏–∑")
st.markdown("---")

# === –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ ===
symbol = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT)", value="BTCUSDT").strip().upper()

if not symbol or not symbol.replace("USDT", "").replace("USD", "").replace("PERP", "").isalpha():
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)")
    st.stop()

# === –ì—Ä–∞—Ñ–∏–∫ TradingView ===
tradingview_url = f"https://s.tradingview.com/widgetembed/?frameElementId=tradingview_123&symbol=BYBIT:{symbol}.P&interval=60&theme=dark&style=1&locale=ru&toolbar_bg=%23f1f3f6&enable_publishing=false&hide_top_toolbar=false&hide_side_toolbar=true&save_image=true&studies=%5B%22STD%3BCumulative%251Volume%251Delta%22%2C%22STD%3BDEMA%22%2C%22STD%3BOpen%251Interest%22%2C%22STD%3BPivot%251Points%251Standard%22%2C%22STD%3BDivergence%251Indicator%22%5D&hide_volume=false&hide_legend=false&withdateranges=false&hotlist=false&calendar=false&details=false&watchlist=%5B%5D&compareSymbols=%5B%5D&studies_overrides=%7B%7D&overrides=%7B%22paneProperties.backgroundColor%22%3A%22%230F0F0F%22%2C%22paneProperties.gridColor%22%3A%22rgba(242%2C%20242%2C%20242%2C%200.06)%22%7D&timezone=Europe%2FMoscow"

st.components.v1.iframe(
    src=tradingview_url,
    width=1200,
    height=700,
    scrolling=False
)

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ WebSocket ===
def get_klines_via_websocket(symbol, interval="60", limit=20):
    url = "wss://stream.bybit.com/v5/public/linear"
    klines = []
    lock = threading.Lock()
    event = threading.Event()

    def on_message(ws, message):
        data = json.loads(message)
        if data.get("topic") == f"kline.{interval}.{symbol}":
            kline = data["data"]["kline"][-1]  # –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Å–≤–µ—á–∞
            with lock:
                if len(klines) < limit:
                    klines.append(kline)
                else:
                    ws.close()
                    event.set()

    def on_error(ws, error):
        pass

    def on_close(ws, close_status_code, close_msg):
        event.set()

    def on_open(ws):
        subscribe_msg = {
            "op": "subscribe",
            "args": [f"kline.{interval}.{symbol}"]
        }
        ws.send(json.dumps(subscribe_msg))

    ws = websocket.WebSocketApp(url,
                                on_open=on_open,
                                on_message=on_message,
                                on_error=on_error,
                                on_close=on_close)
    
    wst = threading.Thread(target=ws.run_forever)
    wst.daemon = True
    wst.start()
    
    # –ñ–¥—ë–º –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
    if not event.wait(timeout=10):
        ws.close()
    
    return klines

# === –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ===
if st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini"):
    with st.spinner("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit WebSocket –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ WebSocket
         full_symbol = f"{symbol}.P"  # –î–æ–±–∞–≤–ª—è–µ–º .P –¥–ª—è perpetual
klines = get_klines_via_websocket(full_symbol, interval="60", limit=10)
            
            # === –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ===
if st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini"):
    with st.spinner("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit WebSocket –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏–º–≤–æ–ª —Å .P
            full_symbol = f"{symbol}.P"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ WebSocket
            klines = get_klines_via_websocket(full_symbol, interval="60", limit=10)
            
            if not klines:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ WebSocket. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª.")
                st.stop()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Gemini
            data_str = "\n".join([
                f"–í—Ä–µ–º—è: {k['timestamp']}, O: {k['open']}, H: {k['high']}, L: {k['low']}, C: {k['close']}"
                for k in klines
            ])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
            api_key = os.getenv("GEMINI_API_KEY")
            if not api_key:
                st.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY –≤ Secrets.")
                st.stop()
                
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-1.5-pro")
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π {symbol} –Ω–∞ Bybit.
            –î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Ç—Ä–µ–Ω–¥, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.
            –î–∞–Ω–Ω—ã–µ (–≤—Ä–µ–º—è –≤ Unix ms, O, H, L, C):
            {data_str}
            """
            
            response = model.generate_content(prompt)
            st.success("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini:")
            st.markdown(response.text)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
