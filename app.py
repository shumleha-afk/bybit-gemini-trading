import streamlit as st
import requests
import google.generativeai as genai
import os
from datetime import datetime

st.set_page_config(page_title="CoinGecko + Gemini AI", layout="wide")
st.title("üìà –ö—Ä–∏–ø—Ç–æ-–≥—Ä–∞—Ñ–∏–∫ + ü§ñ AI-–∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)")
st.markdown("---")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ ID CoinGecko
coin_map = {
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "SOL": "solana",
    "BNB": "binancecoin",
    "XRP": "ripple",
    "ADA": "cardano",
    "DOGE": "dogecoin"
}

coin_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É", options=list(coin_map.keys()), index=0)
vs_currency = st.selectbox("–í–∞–ª—é—Ç–∞", options=["usd", "eur", "rub"], index=0)

coin_id = coin_map[coin_name]

# –ì—Ä–∞—Ñ–∏–∫ TradingView (—Å–ø–æ—Ç)
tradingview_url = f"https://s.tradingview.com/widgetembed/?symbol=COINBASE:{coin_name}USD&interval=60&theme=dark&style=1&locale=ru"
st.components.v1.iframe(src=tradingview_url, width=1200, height=700, scrolling=False)

if st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini"):
    with st.spinner("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å CoinGecko..."):
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ CoinGecko
            url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
            params = {"vs_currency": vs_currency, "days": "7"}  # 7 –¥–Ω–µ–π –ø–æ—á–∞—Å–æ–≤–æ
            resp = requests.get(url, timeout=10)
            resp.raise_for_status()
            data = resp.json()
            
            if "prices" not in data or not data["prices"]:
                st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç CoinGecko")
                st.stop()
            
            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —Ç–æ—á–∫–∏ (~24 —á–∞—Å–∞)
            prices = data["prices"][-24:]
            data_str = "\n".join([
                f"–í—Ä–µ–º—è: {datetime.fromtimestamp(p[0]/1000).strftime('%Y-%m-%d %H:%M')}, –¶–µ–Ω–∞: {p[1]:.2f} {vs_currency.upper()}"
                for p in prices
            ])
            
            # Gemini API
            api_key = os.getenv("GEMINI_API_KEY")
            if not api_key:
                st.error("–î–æ–±–∞–≤—å—Ç–µ GEMINI_API_KEY –≤ Secrets")
                st.stop()
                
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-1.5-pro")
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Ü–µ–Ω—ã {coin_name} –≤ {vs_currency.upper()}:\n{data_str}"
            response = model.generate_content(prompt)
            
            st.success("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini:")
            st.markdown(response.text)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
